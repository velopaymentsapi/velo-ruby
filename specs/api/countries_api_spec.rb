=begin
#Velo Payments APIs

### Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 

The version of the OpenAPI document: 2.35.58

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for VeloPayments::CountriesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CountriesApi' do
  before do
    # run before each test

    if ENV['APITOKEN'] == ""
      VeloPayments.configure do |config|
        config.username = ENV['KEY']
        config.password =  ENV['SECRET']
      end
      
      api_instance = VeloPayments::LoginApi.new
      opts = {
        grant_type: 'client_credentials'
      }
      
      begin
        res = api_instance.velo_auth(opts)

        ENV['APITOKEN'] = res.access_token
      rescue VeloPayments::ApiError => e
        puts "Exception when calling LoginApi->velo_auth: #{e}"
      end
    end

    uri = URI.parse(ENV['APIURL'])
    VeloPayments.configure do |config|
      config.access_token = ENV['APITOKEN']
      config.host = uri.host
    end

    @api_instance = VeloPayments::CountriesApi.new

  end

  after do
    # run after each test
  end

  describe 'test an instance of CountriesApi' do
    it 'should create an instance of CountriesApi' do
      expect(@api_instance).to be_instance_of(VeloPayments::CountriesApi)
    end
  end

  # unit tests for list_payment_channel_rules_v1
  # List Payment Channel Country Rules
  # List the country specific payment channel rules.
  # @param [Hash] opts the optional parameters
  # @return [PaymentChannelRulesResponse]
  describe 'list_payment_channel_rules_v1 test' do
    skip "skipping test" do
    # it 'should work' do
    #   res = @api_instance.list_supported_countries_v1
    #   expect(res.countries.length()).to be > 1
    #   expect(@api_instance).to respond_to(:list_supported_countries_v1) 
    end
  end

  # unit tests for list_supported_countries_v1
  # List Supported Countries
  # &lt;p&gt;List the supported countries.&lt;/p&gt; &lt;p&gt;This version will be retired in March 2020. Use /v2/supportedCountries&lt;/p&gt; 
  # @param [Hash] opts the optional parameters
  # @return [SupportedCountriesResponse]
  describe 'list_supported_countries_v1 test' do
    it 'should work' do
      res = @api_instance.list_supported_countries_v2
      expect(res.countries.length()).to be > 1
      expect(@api_instance).to respond_to(:list_supported_countries_v2) 
    end
  end

  # unit tests for list_supported_countries_v2
  # List Supported Countries
  # List the supported countries.
  # @param [Hash] opts the optional parameters
  # @return [SupportedCountriesResponseV2]
  describe 'list_supported_countries_v2 test' do
    it 'should work' do
      res = @api_instance.list_payment_channel_rules_v1
      expect(res.bank.length()).to be > 1
      expect(@api_instance).to respond_to(:list_payment_channel_rules_v1) 
    end
  end

end
