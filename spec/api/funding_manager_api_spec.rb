=begin
#Velo Payments APIs

### Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 

The version of the OpenAPI document: 2.22.122

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for VeloPayments::FundingManagerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FundingManagerApi' do
  before do
    # run before each test
    if ENV['APITOKEN'] == ""
      VeloPayments.configure do |config|
        config.username = ENV['KEY']
        config.password =  ENV['SECRET']
      end
      
      api_instance = VeloPayments::LoginApi.new
      opts = {
        grant_type: 'client_credentials'
      }
      
      begin
        res = api_instance.velo_auth(opts)

        ENV['APITOKEN'] = res.access_token
      rescue VeloPayments::ApiError => e
        puts "Exception when calling LoginApi->velo_auth: #{e}"
      end
    end

    VeloPayments.configure do |config|
      config.access_token = ENV['APITOKEN']
    end

    @api_instance = VeloPayments::FundingManagerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FundingManagerApi' do
    it 'should create an instance of FundingManagerApi' do
      expect(@api_instance).to be_instance_of(VeloPayments::FundingManagerApi)
    end
  end

  # unit tests for create_ach_funding_request
  # Create Funding Request
  # Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo.
  # @param source_account_id Source account id
  # @param funding_request_v1 Body to included amount to be funded
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_ach_funding_request test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_funding_request
  # Create Funding Request
  # Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo  (202 - accepted, 400 - invalid request body, 404 - source account not found).
  # @param source_account_id Source account id
  # @param funding_request_v2 Body to included amount to be funded
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_funding_request test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_funding_request_v3
  # Create Funding Request
  # Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo  (202 - accepted, 400 - invalid request body, 404 - source account not found).
  # @param source_account_id Source account id
  # @param funding_request_v3 Body to included amount to be funded
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_funding_request_v3 test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_account
  # Get Funding Account
  # Get Funding Account by ID
  # @param funding_account_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :sensitive 
  # @return [FundingAccountResponse]
  describe 'get_funding_account test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_account_v2
  # Get Funding Account
  # Get Funding Account by ID
  # @param funding_account_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :sensitive 
  # @return [FundingAccountResponse2]
  describe 'get_funding_account_v2 test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_accounts
  # Get Funding Accounts
  # Get the funding accounts.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :payor_id 
  # @option opts [String] :source_account_id 
  # @option opts [Integer] :page Page number. Default is 1.
  # @option opts [Integer] :page_size The number of results to return in a page
  # @option opts [String] :sort List of sort fields (e.g. ?sort&#x3D;accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name and currency.
  # @option opts [Boolean] :sensitive 
  # @return [ListFundingAccountsResponse]
  describe 'get_funding_accounts test' do
    it 'should work' do
      opts = {
        payor_id: ENV['PAYOR'], # String | 
        source_account_id: '', # String | 
        page: 1, # Integer | Page number. Default is 1.
        page_size: 25, # Integer | The number of results to return in a page
        sort: 'accountName:asc', # String | List of sort fields (e.g. ?sort=accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name and currency.
        sensitive: false # Boolean | 
      }
      res = @api_instance.get_funding_accounts(opts)
      expect(res.content.length()).to be >= 1
      expect(@api_instance).to respond_to(:get_funding_accounts) 
    end
  end

  # unit tests for get_funding_accounts_v2
  # Get Funding Accounts
  # Get the funding accounts.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :payor_id 
  # @option opts [String] :name The descriptive funding account name
  # @option opts [String] :country The 2 letter ISO 3166-1 country code (upper case)
  # @option opts [String] :currency The ISO 4217 currency code
  # @option opts [FundingAccountType] :type The type of funding account.
  # @option opts [Integer] :page Page number. Default is 1.
  # @option opts [Integer] :page_size The number of results to return in a page
  # @option opts [String] :sort List of sort fields (e.g. ?sort&#x3D;accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name.
  # @option opts [Boolean] :sensitive 
  # @return [ListFundingAccountsResponse2]
  describe 'get_funding_accounts_v2 test' do
    it 'should work' do
      opts = {
        payor_id: ENV['PAYOR'], # String | 
        name: '', # String | The descriptive funding account name
        country: 'US', # String | The 2 letter ISO 3166-1 country code (upper case)
        currency: 'USD', # String | The ISO 4217 currency code
        type: 'FBO', # FundingAccountType | The type of funding account.
        page: 1, # Integer | Page number. Default is 1.
        page_size: 25, # Integer | The number of results to return in a page
        sort: 'accountName:asc', # String | List of sort fields (e.g. ?sort=accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name.
        sensitive: false # Boolean | 
      }
      res = @api_instance.get_funding_accounts_v2(opts)
      expect(res.content.length()).to be >= 1
      expect(@api_instance).to respond_to(:get_funding_accounts_v2) 
    end
  end

  # unit tests for get_source_account
  # Get details about given source account.
  # Get details about given source account.
  # @param source_account_id Source account id
  # @param [Hash] opts the optional parameters
  # @return [SourceAccountResponse]
  describe 'get_source_account test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_source_account_v2
  # Get details about given source account.
  # Get details about given source account.
  # @param source_account_id Source account id
  # @param [Hash] opts the optional parameters
  # @return [SourceAccountResponseV2]
  describe 'get_source_account_v2 test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_source_account_v3
  # Get details about given source account.
  # Get details about given source account.
  # @param source_account_id Source account id
  # @param [Hash] opts the optional parameters
  # @return [SourceAccountResponseV3]
  describe 'get_source_account_v3 test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_source_accounts
  # Get list of source accounts
  # List source accounts.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :physical_account_name Physical Account Name
  # @option opts [String] :payor_id The account owner Payor ID
  # @option opts [Integer] :page Page number. Default is 1.
  # @option opts [Integer] :page_size The number of results to return in a page
  # @option opts [String] :sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef 
  # @return [ListSourceAccountResponse]
  describe 'get_source_accounts test' do
    it 'should work' do
      opts = {
        physical_account_name: nil, # String | Physical Account Name
        payor_id: ENV['PAYOR'], # String | The account owner Payor ID
        page: 1, # Integer | Page number. Default is 1.
        page_size: 25, # Integer | The number of results to return in a page
        sort: 'fundingRef:asc' # String | List of sort fields e.g. ?sort=name:asc Default is name:asc The supported sort fields are - fundingRef 
      }
      res = @api_instance.get_source_accounts(opts)
      expect(res.content.length()).to be >= 1
      expect(@api_instance).to respond_to(:get_source_accounts) 
    end
  end

  # unit tests for get_source_accounts_v2
  # Get list of source accounts
  # List source accounts.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :physical_account_name Physical Account Name
  # @option opts [String] :physical_account_id The physical account ID
  # @option opts [String] :payor_id The account owner Payor ID
  # @option opts [String] :funding_account_id The funding account ID
  # @option opts [Integer] :page Page number. Default is 1.
  # @option opts [Integer] :page_size The number of results to return in a page
  # @option opts [String] :sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance 
  # @return [ListSourceAccountResponseV2]
  describe 'get_source_accounts_v2 test' do
    it 'should work' do
      opts = {
        physical_account_name: nil, # String | Physical Account Name
        physical_account_id: nil, # String | The physical account ID
        payor_id: ENV['PAYOR'], # String | The account owner Payor ID
        funding_account_id: nil, # String | The funding account ID
        page: 1, # Integer | Page number. Default is 1.
        page_size: 25, # Integer | The number of results to return in a page
        sort: 'fundingRef:asc' # String | List of sort fields e.g. ?sort=name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance 
      }

      res = @api_instance.get_source_accounts_v2(opts)
      expect(res.content.length()).to be >= 1
      expect(@api_instance).to respond_to(:get_source_accounts_v2) 
    end
  end

  # unit tests for get_source_accounts_v3
  # Get list of source accounts
  # List source accounts.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :physical_account_name Physical Account Name
  # @option opts [String] :physical_account_id The physical account ID
  # @option opts [String] :payor_id The account owner Payor ID
  # @option opts [String] :funding_account_id The funding account ID
  # @option opts [SourceAccountType] :type The type of source account.
  # @option opts [Integer] :page Page number. Default is 1.
  # @option opts [Integer] :page_size The number of results to return in a page
  # @option opts [String] :sort List of sort fields e.g. ?sort&#x3D;name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance 
  # @return [ListSourceAccountResponseV3]
  describe 'get_source_accounts_v3 test' do
    it 'should work' do
      opts = {
        physical_account_name: nil, # String | Physical Account Name
        physical_account_id: nil, # String | The physical account ID
        payor_id: ENV['PAYOR'], # String | The account owner Payor ID
        funding_account_id: nil, # String | The funding account ID
        type: 'FBO', # VeloPayments::SourceAccountType.new, # SourceAccountType | The type of source account.
        page: 1, # Integer | Page number. Default is 1.
        page_size: 25, # Integer | The number of results to return in a page
        sort: 'fundingRef:asc' # String | List of sort fields e.g. ?sort=name:asc Default is name:asc The supported sort fields are - fundingRef, name, balance 
      }

      res = @api_instance.get_source_accounts_v3(opts)
      expect(res.content.length()).to be >= 1
      expect(@api_instance).to respond_to(:get_source_accounts_v3) 
    end
  end

  # unit tests for list_funding_audit_deltas
  # Get Funding Audit Delta
  # Get funding audit deltas for a payor
  # @param payor_id 
  # @param updated_since 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. Default is 1.
  # @option opts [Integer] :page_size The number of results to return in a page
  # @return [PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse]
  describe 'list_funding_audit_deltas test' do
    it 'should work' do
      payor_id = ENV['PAYOR'] # String | 
      updated_since = DateTime.parse('2013-10-20T19:20:30+01:00') # DateTime | 
      opts = {
        page: 1, # Integer | Page number. Default is 1.
        page_size: 25, # Integer | The number of results to return in a page
      }

      res = @api_instance.list_funding_audit_deltas(payor_id, updated_since, opts)
      expect(res.content.length()).to be >= 1
      expect(@api_instance).to respond_to(:list_funding_audit_deltas) 
    end
  end

  # unit tests for set_notifications_request
  # Set notifications
  # Set notifications for a given source account
  # @param source_account_id Source account id
  # @param set_notifications_request Body to included minimum balance to set
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'set_notifications_request test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_funds
  # Transfer Funds between source accounts
  # Transfer funds between source accounts for a Payor. The &#39;from&#39; source account is identified in the URL, and is the account which will be debited. The &#39;to&#39; (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the &#39;from&#39; source account, otherwise the transfer attempt will fail.
  # @param source_account_id The &#39;from&#39; source account id, which will be debited
  # @param transfer_request Body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'transfer_funds test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_funds_v3
  # Transfer Funds between source accounts
  # Transfer funds between source accounts for a Payor. The &#39;from&#39; source account is identified in the URL, and is the account which will be debited. The &#39;to&#39; (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the &#39;from&#39; source account, otherwise the transfer attempt will fail.
  # @param source_account_id The &#39;from&#39; source account id, which will be debited
  # @param transfer_request2 Body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'transfer_funds_v3 test' do
    skip "skipping test" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
