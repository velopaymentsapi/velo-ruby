=begin
#Velo Payments APIs

### Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response. 

The version of the OpenAPI document: 2.18.113

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3-SNAPSHOT

=end

require 'cgi'

module VeloPayments
  class TokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate an OTP
    # Generate an OTP and send to the MFA type specified in the request body 
    # @param token_id [String] The UUID of the Token
    # @param generate_otp_request [GenerateOTPRequest] The MFA type to send the generated OTP to
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_otp(token_id, generate_otp_request, opts = {})
      generate_otp_with_http_info(token_id, generate_otp_request, opts)
      nil
    end

    # Generate an OTP
    # Generate an OTP and send to the MFA type specified in the request body 
    # @param token_id [String] The UUID of the Token
    # @param generate_otp_request [GenerateOTPRequest] The MFA type to send the generated OTP to
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_otp_with_http_info(token_id, generate_otp_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.generate_otp ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.generate_otp"
      end
      # verify the required parameter 'generate_otp_request' is set
      if @api_client.config.client_side_validation && generate_otp_request.nil?
        fail ArgumentError, "Missing the required parameter 'generate_otp_request' when calling TokensApi.generate_otp"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}/otp'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(generate_otp_request) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#generate_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send an OTP to SMS Users
    # <p>Generate an OTP and send to the SMS device if the user</p> <p>Only users who have SMS as their registered MFA device will receive an OTP</p> <p>Used in conjuction with endpoints that require the Velo-OTP header</p> 
    # @param token_id [String] The UUID of the Token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_otp_for_sms(token_id, opts = {})
      generate_otp_for_sms_with_http_info(token_id, opts)
      nil
    end

    # Send an OTP to SMS Users
    # &lt;p&gt;Generate an OTP and send to the SMS device if the user&lt;/p&gt; &lt;p&gt;Only users who have SMS as their registered MFA device will receive an OTP&lt;/p&gt; &lt;p&gt;Used in conjuction with endpoints that require the Velo-OTP header&lt;/p&gt; 
    # @param token_id [String] The UUID of the Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_otp_for_sms_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.generate_otp_for_sms ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.generate_otp_for_sms"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}/otp/generate'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#generate_otp_for_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a QR Code image
    # <p>Get a QR Code for an MFA device that supports it </p> <p>The device must have first been registered</p> 
    # @param token_id [String] The UUID of the Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width The width of the image 
    # @option opts [Integer] :height The height of the image 
    # @return [File]
    def get_qr_code_for_mfa(token_id, opts = {})
      data, _status_code, _headers = get_qr_code_for_mfa_with_http_info(token_id, opts)
      data
    end

    # Get a QR Code image
    # &lt;p&gt;Get a QR Code for an MFA device that supports it &lt;/p&gt; &lt;p&gt;The device must have first been registered&lt;/p&gt; 
    # @param token_id [String] The UUID of the Token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width The width of the image 
    # @option opts [Integer] :height The height of the image 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_qr_code_for_mfa_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.get_qr_code_for_mfa ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.get_qr_code_for_mfa"
      end
      if @api_client.config.client_side_validation && !opts[:'width'].nil? && opts[:'width'] > 1024
        fail ArgumentError, 'invalid value for "opts[:"width"]" when calling TokensApi.get_qr_code_for_mfa, must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'width'].nil? && opts[:'width'] < 1
        fail ArgumentError, 'invalid value for "opts[:"width"]" when calling TokensApi.get_qr_code_for_mfa, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'height'].nil? && opts[:'height'] > 1024
        fail ArgumentError, 'invalid value for "opts[:"height"]" when calling TokensApi.get_qr_code_for_mfa, must be smaller than or equal to 1024.'
      end

      if @api_client.config.client_side_validation && !opts[:'height'].nil? && opts[:'height'] < 1
        fail ArgumentError, 'invalid value for "opts[:"height"]" when calling TokensApi.get_qr_code_for_mfa, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/v1/tokens/{tokenId}/mfa/qrcode'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#get_qr_code_for_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Token
    # Get a Single Verification Token by Id. 
    # @param token_id [String] The UUID of the Token
    # @param [Hash] opts the optional parameters
    # @return [CheckTokenResponse]
    def get_verification_token_by_id(token_id, opts = {})
      data, _status_code, _headers = get_verification_token_by_id_with_http_info(token_id, opts)
      data
    end

    # Get Token
    # Get a Single Verification Token by Id. 
    # @param token_id [String] The UUID of the Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(CheckTokenResponse, Integer, Hash)>] CheckTokenResponse data, response status code and response headers
    def get_verification_token_by_id_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.get_verification_token_by_id ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.get_verification_token_by_id"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CheckTokenResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#get_verification_token_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register an MFA Device
    # <p>Some MFA Devices based on TOTP require a registration step (Authy, Authenticator) </p> <p>Registering the device will create a shared secret that the MFA device uses to generate OTPs</p> 
    # @param token_id [String] The UUID of the Token
    # @param register_mfa_request [RegisterMFARequest] The MFA Type to register
    # @param [Hash] opts the optional parameters
    # @return [RegisterMFAResponse]
    def register_mfa(token_id, register_mfa_request, opts = {})
      data, _status_code, _headers = register_mfa_with_http_info(token_id, register_mfa_request, opts)
      data
    end

    # Register an MFA Device
    # &lt;p&gt;Some MFA Devices based on TOTP require a registration step (Authy, Authenticator) &lt;/p&gt; &lt;p&gt;Registering the device will create a shared secret that the MFA device uses to generate OTPs&lt;/p&gt; 
    # @param token_id [String] The UUID of the Token
    # @param register_mfa_request [RegisterMFARequest] The MFA Type to register
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegisterMFAResponse, Integer, Hash)>] RegisterMFAResponse data, response status code and response headers
    def register_mfa_with_http_info(token_id, register_mfa_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.register_mfa ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.register_mfa"
      end
      # verify the required parameter 'register_mfa_request' is set
      if @api_client.config.client_side_validation && register_mfa_request.nil?
        fail ArgumentError, "Missing the required parameter 'register_mfa_request' when calling TokensApi.register_mfa"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}/mfa/register'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(register_mfa_request) 

      # return_type
      return_type = opts[:return_type] || 'RegisterMFAResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#register_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend a token
    # <p>Resend the specified token </p> <p>The token to resend must already exist for the user </p> <p>It will be revoked and a new one issued</p> 
    # @param user_id [String] The UUID of the User.
    # @param resend_token_request [ResendTokenRequest] The type of token to resend
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resend_token(user_id, resend_token_request, opts = {})
      resend_token_with_http_info(user_id, resend_token_request, opts)
      nil
    end

    # Resend a token
    # &lt;p&gt;Resend the specified token &lt;/p&gt; &lt;p&gt;The token to resend must already exist for the user &lt;/p&gt; &lt;p&gt;It will be revoked and a new one issued&lt;/p&gt; 
    # @param user_id [String] The UUID of the User.
    # @param resend_token_request [ResendTokenRequest] The type of token to resend
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def resend_token_with_http_info(user_id, resend_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.resend_token ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TokensApi.resend_token"
      end
      # verify the required parameter 'resend_token_request' is set
      if @api_client.config.client_side_validation && resend_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'resend_token_request' when calling TokensApi.resend_token"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/tokens'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(resend_token_request) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#resend_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submit a password
    # Submit a password 
    # @param token_id [String] The UUID of the Token
    # @param password_request [PasswordRequest] The password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :velo_otp required when updating password using reset password &lt;P&gt; The OTP is supplied by the users MFA device 
    # @return [AccessTokenResponse]
    def submit_password(token_id, password_request, opts = {})
      data, _status_code, _headers = submit_password_with_http_info(token_id, password_request, opts)
      data
    end

    # Submit a password
    # Submit a password 
    # @param token_id [String] The UUID of the Token
    # @param password_request [PasswordRequest] The password
    # @param [Hash] opts the optional parameters
    # @option opts [String] :velo_otp required when updating password using reset password &lt;P&gt; The OTP is supplied by the users MFA device 
    # @return [Array<(AccessTokenResponse, Integer, Hash)>] AccessTokenResponse data, response status code and response headers
    def submit_password_with_http_info(token_id, password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.submit_password ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.submit_password"
      end
      # verify the required parameter 'password_request' is set
      if @api_client.config.client_side_validation && password_request.nil?
        fail ArgumentError, "Missing the required parameter 'password_request' when calling TokensApi.submit_password"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}/password'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Velo-OTP'] = opts[:'velo_otp'] if !opts[:'velo_otp'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(password_request) 

      # return_type
      return_type = opts[:return_type] || 'AccessTokenResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#submit_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlock the user
    # <p>When a user is locked out of their account due to execeding the limit of login attempts</p> <p>They can use a token to unlock their account </p> <p>Submitting the token will unlock the account associated with the token</p> 
    # @param token_id [String] The UUID of the Token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unlock_account_with_token(token_id, opts = {})
      unlock_account_with_token_with_http_info(token_id, opts)
      nil
    end

    # Unlock the user
    # &lt;p&gt;When a user is locked out of their account due to execeding the limit of login attempts&lt;/p&gt; &lt;p&gt;They can use a token to unlock their account &lt;/p&gt; &lt;p&gt;Submitting the token will unlock the account associated with the token&lt;/p&gt; 
    # @param token_id [String] The UUID of the Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unlock_account_with_token_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.unlock_account_with_token ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.unlock_account_with_token"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}/password/lockout'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#unlock_account_with_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate an MFA Device
    # <p>Validate the user's registered MFA device with an OTP </p> <p>The response will be different based on the token type against which the MFA is validated </p> <p>For INVITE_MFA_USER tokens the response will be 200 and an access token will be returned i the response </p> <p>For MFA_REGISTRATION tokens the response will be 204</p> 
    # @param token_id [String] The UUID of the Token
    # @param validate_mfa_request [ValidateMFARequest] The OTP generated or received by the device
    # @param [Hash] opts the optional parameters
    # @return [AccessTokenResponse]
    def validate_mfa(token_id, validate_mfa_request, opts = {})
      data, _status_code, _headers = validate_mfa_with_http_info(token_id, validate_mfa_request, opts)
      data
    end

    # Validate an MFA Device
    # &lt;p&gt;Validate the user&#39;s registered MFA device with an OTP &lt;/p&gt; &lt;p&gt;The response will be different based on the token type against which the MFA is validated &lt;/p&gt; &lt;p&gt;For INVITE_MFA_USER tokens the response will be 200 and an access token will be returned i the response &lt;/p&gt; &lt;p&gt;For MFA_REGISTRATION tokens the response will be 204&lt;/p&gt; 
    # @param token_id [String] The UUID of the Token
    # @param validate_mfa_request [ValidateMFARequest] The OTP generated or received by the device
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccessTokenResponse, Integer, Hash)>] AccessTokenResponse data, response status code and response headers
    def validate_mfa_with_http_info(token_id, validate_mfa_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.validate_mfa ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.validate_mfa"
      end
      # verify the required parameter 'validate_mfa_request' is set
      if @api_client.config.client_side_validation && validate_mfa_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_mfa_request' when calling TokensApi.validate_mfa"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}/mfa/validate'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(validate_mfa_request) 

      # return_type
      return_type = opts[:return_type] || 'AccessTokenResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#validate_mfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate an OTP
    # <p>Validate the OTP </p> <p>The token that was used in the request will be revoked and a new token issued </p> <p>The new token link will be returned in a location header</p> <p>If there are too many invalid OTP requests the token may be disabled</p> 
    # @param token_id [String] The UUID of the Token
    # @param validate_otp_request [ValidateOTPRequest] The OTP generated and sent to the device
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_otp(token_id, validate_otp_request, opts = {})
      validate_otp_with_http_info(token_id, validate_otp_request, opts)
      nil
    end

    # Validate an OTP
    # &lt;p&gt;Validate the OTP &lt;/p&gt; &lt;p&gt;The token that was used in the request will be revoked and a new token issued &lt;/p&gt; &lt;p&gt;The new token link will be returned in a location header&lt;/p&gt; &lt;p&gt;If there are too many invalid OTP requests the token may be disabled&lt;/p&gt; 
    # @param token_id [String] The UUID of the Token
    # @param validate_otp_request [ValidateOTPRequest] The OTP generated and sent to the device
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_otp_with_http_info(token_id, validate_otp_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.validate_otp ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.validate_otp"
      end
      # verify the required parameter 'validate_otp_request' is set
      if @api_client.config.client_side_validation && validate_otp_request.nil?
        fail ArgumentError, "Missing the required parameter 'validate_otp_request' when calling TokensApi.validate_otp"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}/otp/validate'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(validate_otp_request) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#validate_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate the proposed password
    # validate the password and return a score 
    # @param token_id [String] The UUID of the Token
    # @param password_request [PasswordRequest] The password
    # @param [Hash] opts the optional parameters
    # @return [ValidatePasswordResponse]
    def validate_password(token_id, password_request, opts = {})
      data, _status_code, _headers = validate_password_with_http_info(token_id, password_request, opts)
      data
    end

    # Validate the proposed password
    # validate the password and return a score 
    # @param token_id [String] The UUID of the Token
    # @param password_request [PasswordRequest] The password
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidatePasswordResponse, Integer, Hash)>] ValidatePasswordResponse data, response status code and response headers
    def validate_password_with_http_info(token_id, password_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensApi.validate_password ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling TokensApi.validate_password"
      end
      # verify the required parameter 'password_request' is set
      if @api_client.config.client_side_validation && password_request.nil?
        fail ArgumentError, "Missing the required parameter 'password_request' when calling TokensApi.validate_password"
      end
      # resource path
      local_var_path = '/v1/tokens/{tokenId}/password/validate'.sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(password_request) 

      # return_type
      return_type = opts[:return_type] || 'ValidatePasswordResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensApi#validate_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
